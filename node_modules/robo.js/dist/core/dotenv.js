import { existsSync, readFileSync } from 'node:fs';
import { readFile } from 'node:fs/promises';
import v from 'node:path';
import { IS_BUN } from '../cli/utils/runtime-utils.js';
import { logger } from './logger.js';

function h(s){const i=s.split(`
`),f=/^\s*#/,t=/^['"]/,d=/\\(.)/g;let e="";const c={};for(let o=0;o<i.length;o++){if(e+=i[o],f.test(e)){e="";continue}if(e.endsWith("\\")){e=e.slice(0,-1);continue}const n=e.indexOf("=");if(n===-1){e="";continue}const l=e.substr(0,n).trim();let r=e.substr(n+1).trim();t.test(r)&&(r=r.slice(1,-1).replace(d,"$1")),c[l]=r,e="";}return c}async function k(s={}){if(IS_BUN)return;const{mode:i,overwrite:f}=s;let{filePath:t=v.join(process.cwd(),".env")}=s;if(i&&existsSync(t+"."+i)&&(logger.debug("Found .env file for mode:",i,":",t+"."+i),t=v.join(process.cwd(),".env."+i)),!existsSync(t)){logger.debug(`No .env file found at "${t}"`);return}const d=s.sync?readFileSync(t,"utf-8"):await readFile(t,"utf-8"),e=h(d),c=/\${(.+?)}/g,o={...process.env};try{for(const n in e){if(!f&&n in o)continue;const l=new Set;let r=e[n];for(;c.test(r);)r=r.replace(c,(b,a)=>{if(l.has(a))throw new Error(`Circular reference detected in environment variable "${n}"`);return l.add(a),o[a]||e[a]||""});o[n]=r;}Object.assign(process.env,o);}catch(n){console.error("Error while loading environment variables:",n);}}

export { k as loadEnv };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=dotenv.js.map