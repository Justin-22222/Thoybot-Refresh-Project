import { logger } from './logger.js';
import g, { existsSync } from 'node:fs';
import e from 'node:path';
import { pathToFileURL } from 'node:url';
import { Mode } from './mode.js';

let P=null;const h=new Set;function I(){return P}function L(){return h}async function O(s="robo"){const o=await j(s);let n;return o?(n=await C(o),h.add(o),o.includes(e.sep+"config"+e.sep)&&(logger.debug("Scanning for plugin files..."),n.plugins=n.plugins??[],await v(o,(f,r,i)=>{const t=n.plugins?.findIndex(a=>a===f||a[0]===f);t!==-1&&n.plugins?.splice(t,1),n.plugins?.push([f,r]),h.add(i);}))):n={clientOptions:{intents:[]}},P=n,logger.debug("Loaded configuration file:",n),n}async function j(s="robo"){const o=[".mjs",".cjs",".json"],n=["config",".config"];for(const f of n){const r=e.join(process.cwd(),f);for(const i of o){let t=e.join(r,`${s}.${Mode.get()}${i}`);try{if(g.existsSync(t))return logger.debug("Found configuration file at",t),t}catch{}try{if(t=e.join(r,`${s}${i}`),g.existsSync(t))return logger.debug("Found configuration file at",t),t}catch{}}}return null}async function v(s,o){const n=e.join(e.dirname(s),"plugins");if(!g.existsSync(n))return;const f=g.readdirSync(n),r=[];for(const i of f){const t=e.join(n,i);if(g.statSync(t).isDirectory()){const a=g.readdirSync(t);for(const c of a){const u=e.join(t,c),p=e.relative(n,u).split("."),x="@"+p[0];let y;p.length>2&&(y=p[1]),r.push({mode:y,name:x,path:u});}}else {const c=e.relative(n,t).split("."),u=c[0];let d;c.length>2&&(d=c[1]),r.push({mode:d,name:u,path:t});}}await Promise.all(r.map(async i=>{if(!i.mode){const a=r.find(c=>c.mode===Mode.get()&&c.name===i.name);if(existsSync(a?.path))return}if(i.mode&&i.mode!==Mode.get())return;const t=await C(i.path);o(i.name,t,i.path);}));}async function C(s){try{if(s.endsWith(".json")){const o=g.readFileSync(s,"utf8");return JSON.parse(o)??{}}else {const o=await import(pathToFileURL(s).toString());return o.default??o??{}}}catch(o){return logger.error("Failed to load configuration file:",o),{}}}

export { I as getConfig, L as getConfigPaths, O as loadConfig, j as loadConfigPath };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=config.js.map